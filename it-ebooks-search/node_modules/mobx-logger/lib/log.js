'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _utils = require('./utils');

var style = function style(color) {
    var bold = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    return 'color:' + color + ';font-weight:' + (bold ? '600' : '300') + ';font-size:11px';
};

var logAction = function logAction(ev) {
    console.groupCollapsed('%c%s  %s  %s.%s()', style('#000'), (0, _utils.now)(), (0, _utils.padStart)('ACTION', 8), ev.target, ev.name);
    console.log('%cFunction %o', style('#777'), ev.fn);
    console.log('%cArguments %o', style('#777'), ev.arguments);
    console.log('%cTarget %o', style('#777'), ev.target);
    console.log('%cEvent %o', style('#777'), ev);
    console.groupEnd();
};

var logReaction = function logReaction(ev) {
    var name = ev.object.name.replace('#null', '');
    console.groupCollapsed('%c%s  %s  %s', style('#9E9E9E'), (0, _utils.now)(), (0, _utils.padStart)('REACTION', 8), name);

    var observables = ev.object.observing || [];
    var names = observables.map(function (it) {
        return it.name;
    });
    if (names.length > 0) {
        console.log('%cObserving %o', style('#777'), names);
    }

    console.log('%cEvent %o', style('#777'), ev);
    console.groupEnd();
};

var logTransaction = function logTransaction(ev) {
    console.groupCollapsed('%c%s  %s  %s', style('#7B7B7B'), (0, _utils.now)(), (0, _utils.padStart)('TX', 8));
    console.log('%cEvent %o', style('#777'), ev);
    console.groupEnd();
};

var logCompute = function logCompute(ev) {
    var name = ev.object.name;
    console.groupCollapsed('%c%s  %s  %s', style('#9E9E9E'), (0, _utils.now)(), (0, _utils.padStart)('COMPUTE', 8), name);
    console.log('%cEvent %o', style('#777'), ev);
    console.groupEnd();
};

exports.default = function (ev, options) {
    if (options[ev.type] !== true) {
        return;
    }

    switch (ev.type) {
        case 'action':
            logAction(ev);
            return;
        case 'reaction':
            logReaction(ev);
            return;
        case 'transaction':
            logTransaction(ev);
            return;
        case 'compute':
            logCompute(ev);
            return;
    }
};